using AdventOfCode.Common;
using AdventOfCode.Core;
using System;
using System.Collections.Generic;
using System.ComponentModel;
namespace AdventOfCode.Y2024 {
    [Description("Monkey Market")]
    public class Puzzle22 : ASolver {
        private List<int> secrets = new();
        private Dictionary<int, byte[]> sets = new();

        public override void Setup() {
            foreach (string line in Input.Split('\n')) {
                secrets.Add(line.ToInt());
            }
        }

        [Description("What is the sum of the 2000th secret number generated by each buyer?")]
        public override string SolvePart1() {
            static int Generate(int number) {
                number = (number ^ (number << 6)) & 0xffffff;
                number = (number ^ (number >> 5)) & 0xffffff;
                return (number ^ (number << 11)) & 0xffffff;
            }

            long total = 0;
            for (int i = 0; i < secrets.Count; i++) {
                int number = secrets[i];
                int difference = 0;
                for (int j = 0; j < 2000; j++) {
                    int newNumber = Generate(number);
                    int price = newNumber % 10;
                    difference = (difference << 8) | (price - (number % 10) + 0x30);
                    number = newNumber;
                    if (j >= 3) {
                        if (!sets.TryGetValue(difference, out byte[] prices)) {
                            prices = new byte[secrets.Count];
                            Array.Fill(prices, (byte)0xff);
                            sets[difference] = prices;
                        }
                        if (prices[i] == 0xff) {
                            prices[i] = (byte)price;
                        }
                    }
                }

                total += number;
            }
            return $"{total}";
        }

        [Description("What is the most bananas you can get?")]
        public override string SolvePart2() {
            int best = 0;
            foreach (byte[] prices in sets.Values) {
                int count = 0;
                for (int i = 0; i < prices.Length; i++) {
                    count += prices[i] < 10 ? prices[i] : 0;
                }
                if (count > best) {
                    best = count;
                }
            }
            return $"{best}";
        }
    }
}